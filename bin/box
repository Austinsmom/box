#!/usr/bin/env php
<?php

define('BOX_PATH', dirname(__DIR__));

$path = __DIR__ . '/../src/vendors/autoload.php';

if (file_exists($path)) {
    require $path;
} elseif (false === composer_load()) {
    fwrite(STDERR, "Box could not be loaded.\n");
    exit(1);
}

$app = new KevinGH\Box\Console\Application;
$app->run();

/**
 * Finds, loads, and returns the Composer autoloader.
 *
 * @return \Composer\Autoload\ClassLoader The autoloader.
 */
function composer_loader()
{
    if (false === ($file = composer_path())) {
        trigger_error(
            'The Composer autoloader could not be found.',
            E_USER_WARNING
        );

        return false;
    }

    if (false === ($data = file_get_contents($file))) {
        return false;
    }

    $data = json_decode($data, true);

    if (JSON_ERROR_NONE !== json_last_error()) {
        trigger_error(
            'Please validate your composer.json file.',
            E_USER_WARNING
        );
    }

    if (isset($data['config'])
        && isset($data['config']['vendor-dir'])) {
        $path = $data['config']['vendor-dir'] . '/autoload.php';
    } else {
        $path = dirname($file) . '/vendor/autoload.php';
    }

    return include $path;
}

/**
 * Returns the path to composer.json. This function will traverse up the
 * hierarchy for the directory path. If no path is found, boolean false
 * is returned.
 *
 * @param string $path The starting directory path.
 *
 * @return boolean|string The composer.json path, or FALSE if not found.
 */
function composer_path($path = __DIR__)
{
    if (false === is_dir($path)) {
        trigger_error(
            "The path, $path, is not a directory path.",
            E_USER_WARNING
        );

        return null;
    }

    while (false === file_exists("$path/composer.json")) {
        if ($path == ($up = dirname($path))) {
            return false;
        }

        $path = $up;
    }

    return realpath("$path/composer.json");
}